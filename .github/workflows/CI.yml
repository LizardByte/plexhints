---
name: CI

on:
  pull_request:
    branches: [master, nightly]
    types: [opened, synchronize, reopened]
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_changelog:
    name: Check Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Changelog
        id: verify_changelog
        if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
        # base_ref for pull request check, ref for push
        uses: LizardByte/.github/actions/verify_changelog@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      next_version: ${{ steps.verify_changelog.outputs.changelog_parser_version }}
      last_version: ${{ steps.verify_changelog.outputs.latest_release_tag_name }}
      release_body: ${{ steps.verify_changelog.outputs.changelog_parser_description }}

#  build:
#    runs-on: ubuntu-20.04
#    needs: check_changelog
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Python 2.7
#        uses: LizardByte/.github/actions/setup_python2@nightly
#
#      - name: Set up Python 2.7 Dependencies
#        shell: bash
#        run: |
#          echo "Installing Requirements"
#          python --version
#          python -m pip --no-python-version-warning --disable-pip-version-check install --upgrade \
#            pip setuptools wheel
#
#          # install requirements
#          python -m pip install --upgrade -r requirements.txt
#          python -m pip install --upgrade -r requirements-dev.txt
#
#      - name: Build plist
#        shell: bash
#        env:
#          BUILD_VERSION: ${{ needs.check_changelog.outputs.next_version }}
#        run: |
#          python ./scripts/build_plist.py
#
#      - name: Package Release
#        shell: bash
#        run: |
#          mkdir -p ./plexhints.bundle/Contents
#
#          # put Contents directory in bundle
#          cp -r ./Contents/. ./plexhints.bundle/Contents
#
#          # create zip
#          7z \
#            "-xr!*.git*" \
#            "-xr!*.pyc" \
#            "-xr!__pycache__" \
#            "-xr!plexhints.bundle/.*" \
#            "-xr!plexhints.bundle/cache.sqlite" \
#            a "./plexhints.bundle.zip" "plexhints.bundle"
#
#          mkdir artifacts
#          mv ./plexhints.bundle.zip ./artifacts/
#
#      - name: Upload Artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: plexhints.bundle
#          if-no-files-found: error  # 'warn' or 'ignore' are also available, defaults to `warn`
#          path: |
#            ${{ github.workspace }}/artifacts
#
#      - name: Create Release
#        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
#        uses: LizardByte/.github/actions/create_release@master
#        with:
#          token: ${{ secrets.GH_BOT_TOKEN }}
#          next_version: ${{ needs.check_changelog.outputs.next_version }}
#          last_version: ${{ needs.check_changelog.outputs.last_version }}
#          release_body: ${{ needs.check_changelog.outputs.release_body }}

  pytest:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    env:
      PLEXAPI_AUTH_SERVER_BASEURL: http://127.0.0.1:32400
    steps:
      - name: Checkout
        uses: actions/checkout@v4

#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: plexhints.bundle
#
#      - name: Extract artifacts zip
#        shell: bash
#        run: |
#          # extract zip
#          7z x plexhints.bundle.zip -o.
#
#          # move all files from "plexhints.bundle" to root, with no target directory
#          cp -r ./plexhints.bundle/. .
#
#          # remove zip
#          rm plexhints.bundle.zip

      - name: Set up Python
        uses: LizardByte/.github/actions/setup_python2@nightly

      - name: Install python dependencies
        shell: bash
        run: |
          python -m pip --no-python-version-warning --disable-pip-version-check install --upgrade \
            pip setuptools wheel

          # install requirements
          # python -m pip install -e .  # installed by action
          python -m pip install --upgrade -r requirements-dev.txt

      - name: Bootstrap Plex server
        id: bootstrap
        uses: ./

      - name: Test with pytest
        id: test
        shell: bash
        run: |
          python -m pytest \
            -rXs \
            --tb=native \
            --verbose \
            --cov=Contents/Code \
            --cov=plexhints \
            tests

      - name: Upload coverage
        # any except cancelled or skipped
        if: always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure')
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }}
