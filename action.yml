---
# This action sets up a Plex Media Server for testing.

name: "Plex Media Server Setup"
description: "This action will install and prepare a Plex Media Server for testing."

inputs:
  accept_eula:
    description: Accept Plex's EULA.
    default: "false"
    required: false
  additional_server_queries_put:
    description: >-
      Space separated list of additional PUT requests to send to the server. The requests are sent before the
      library sections are created. You can use this to enable third party metadata agents, as an example.
      e.g. `/system/agents/com.plexapp.agents.imdb/config/1?order=com.plexapp.agents.imdb%2C<my_movie_agent>`
    default: ""
    required: false
  bootstrap_timeout:
    description: Timeout for each step of bootstrap, in seconds.
    default: "540"
    required: false
  docker_tag:
    description: Docker image to to install. Only used when `use_docker` is `true`.
    default: "latest"
    required: false
  expose_plex_data_files_for_docker:
    description: >-
      When using docker, expose the Plex Media Server application data files to the remainder of your workflow at
      ./plex.
    default: "false"
    required: false
  language:
    description: Language to set inside Plex. Only used when `use_docker` is `false`.
    default: "en-US.UTF-8"
    required: false
  plugin_bundles_to_install:
    description: >-
      Space separated list of plugin bundles to install. Provide the relative or absolute path to the bundle.
    default: ""
    required: false
  timezone:
    description: Timezone to set inside Plex. Only used when `use_docker` is `false`.
    default: "UTC"
    required: false
  use_docker:
    description: Use Docker to run Plex Media Server. This is only supported on Linux.
    default: "false"
    required: false
  without_movies:
    description: Do not create a Movies library (new agent).
    default: "false"
    required: false
  without_movies_imdb:
    description: Do not create a Movies library (IMDB agent).
    default: "false"
    required: false
  without_movies_tmdb:
    description: Do not create a Movies library (TMDB agent).
    default: "false"
    required: false
  without_music:
    description: Do not create a Music library.
    default: "false"
    required: false
  without_photos:
    description: Do not create a Photos library.
    default: "false"
    required: false
  without_shows:
    description: Do not create a TV Shows library.
    default: "false"
    required: false
  without_shows_tmdb:
    description: Do not create a TV Shows library (TMDB agent).
    default: "false"
    required: false
  without_shows_tvdb:
    description: Do not create a TV Shows library (TVDB agent).
    default: "false"
    required: false
outputs:
  PLEXTOKEN:
    description: The Plex Media Server authentication token.
    value: ${{ steps.token.outputs.plex_token }}
  PLEX_APP_DATA_PATH:
    description: The path to the Plex Media Server application data.
    value: ${{ steps.plex.outputs.app_data_path }}
  PLEX_PLUGIN_LOG_PATH:
    description: The path to the Plex Media Server plugin logs.
    value: ${{ steps.plex.outputs.plugin_log_path }}
  PLEX_PLUGIN_PATH:
    description: The path to the Plex Media Server plugins.
    value: ${{ steps.plex.outputs.plugin_path }}
  PLEX_SERVER_BASEURL:
    description: The base URL of the Plex Media Server.
    value: http://127.0.0.1:32400

runs:
  using: "composite"
  steps:
    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        update-environment: false

    - name: Create venv
      id: venv
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Create venv"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # use cygpath to convert windows path to unix path while creating venv
          $(cygpath.exe -u "${{ steps.setup-python.outputs.python-path }}") -m venv venv

          # set python executable as step output
          echo "python-path=$(cygpath.exe -u $(pwd)\\venv\\Scripts\\python.exe)" >> $GITHUB_OUTPUT
        else
          ${{ steps.setup-python.outputs.python-path }} -m venv venv

          # set python executable as step output
          echo "python-path=$(pwd)/venv/bin/python" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"

    - name: Build plist
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Build plist"
        "${{ steps.venv.outputs.python-path }}" ./scripts/build_plist.py
        echo "::endgroup::"

    - name: Setup plexhints.bundle
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Setup plexhints.bundle"
        mkdir -p ./plexhints.bundle/Contents

        # put Contents directory in bundle
        cp -r ./Contents/. ./plexhints.bundle/Contents
        echo "::endgroup::"

    - name: Install Python Requirements
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Install Python Requirements"
        # install the plexhints library
        "${{ steps.venv.outputs.python-path }}" -m pip install -e .

        # install requirements required for this action to complete
        "${{ steps.venv.outputs.python-path }}" -m pip install -r requirements-action.txt
        echo "::endgroup::"

    - name: Install Plex Media Server
      id: plex
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Install Plex Media Server"
        if [[ "${{ inputs.use_docker }}" == "true" ]]; then
          if [[ "${{ runner.os }}" != "Linux" ]]; then
            echo "Docker install not supported on ${{ runner.os }}"
            exit 1
          fi

          if [[ "${{ inputs.expose_plex_data_files_for_docker }}" == "true" ]]; then
            docker_prefix_path="${{ github.workspace }}/plex"
          else
            docker_prefix_path="${{ github.action_path }}/plex"
          fi

          app_data_path="${docker_prefix_path}/db/Library/Application Support/Plex Media Server"
          plugin_path="${app_data_path}/Plug-ins"
          plugin_log_path="${app_data_path}/Logs/PMS Plugin Logs"

        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          app_data_path=$(cygpath.exe -u "${LOCALAPPDATA}/Plex Media Server")
          plugin_path=$(cygpath.exe -u "${app_data_path}/Plug-ins")
          plugin_log_path=$(cygpath.exe -u "${app_data_path}/Logs/PMS Plugin Logs")

          choco install plexmediaserver

          # starting with pmps 1.32.2 servers must be claimed... disable that
          # https://forums.plex.tv/t/new-claiming-requirement-for-windows/839096
          REG ADD "HKCU\Software\Plex, Inc.\Plex Media Server" //v enableLocalSecurity //t REG_DWORD //d 0 //f

        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          app_data_path="${HOME}/Library/Application Support/Plex Media Server"
          plugin_path="${app_data_path}/Plug-ins"
          plugin_log_path="${HOME}/Library/Logs/Plex Media Server/PMS Plugin Logs"

          brew install --cask plex-media-server

          # starting with pms 1.29.2 servers must be claimed... disable that
          # https://forums.plex.tv/t/new-server-claiming-requirement-for-macos/816337
          defaults write com.plexapp.plexmediaserver enableLocalSecurity -bool FALSE

          # start plex after plugins are copied
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          app_data_path="/var/lib/plexmediaserver/Library/Application Support/Plex Media Server"
          plugin_path="${app_data_path}/Plug-ins"
          plugin_log_path="${app_data_path}/Logs/PMS Plugin Logs"

          curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -
          echo deb https://downloads.plex.tv/repo/deb public main | \
            sudo tee /etc/apt/sources.list.d/plexmediaserver.list
          sudo apt-get update
          sudo apt-get install plexmediaserver

          # stop service
          sudo systemctl stop plexmediaserver

          # debug
          cat /lib/systemd/system/plexmediaserver.service

          # do not edit service directly, use override
          # example:
          # [Service]
          # Environment="TMPDIR=/path/to/new/tmp"
          # Environment="PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR=/home/myusername/Library/Application Support"
          # User=myusername
          # Group=mygroup
          override=/etc/systemd/system/plexmediaserver.service.d/override.conf
          sudo mkdir -p $(dirname ${override})
          sudo touch ${override}
          echo "[Service]" | sudo tee ${override}
          # echo "Environment=PLEX_MEDIA_SERVER_MAX_PLUGIN_PROCS=12" | sudo tee -a ${override}
          echo "User=$USER" | sudo tee -a ${override}

          # take ownership
          sudo chown -R $USER:$USER "${app_data_path}"
        else
          echo "Unknown OS: ${{ runner.os }}"
          exit 1
        fi

        # copy plugins
        # first plexhints
        echo "creating ${plugin_path}"
        mkdir -p "${plugin_path}"
        echo "copying ./plexhints.bundle to ${plugin_path}"
        cp -r ./plexhints.bundle "${plugin_path}/"
        echo "plexhints plugin contents:"
        ls -la "${plugin_path}/plexhints.bundle"
        # then additional plugins
        for bundle in ${{ inputs.plugin_bundles_to_install }}; do
          if [[ -d "${bundle}" ]]; then
            echo "copying ${bundle} to ${plugin_path}"
            cp -r "${bundle}" "${plugin_path}/"
          elif [[ -d "${{ github.workspace }}/${bundle}" ]]; then
            echo "copying ${{ github.workspace }}/${bundle} to ${plugin_path}"
            cp -r "${{ github.workspace }}/${bundle}" "${plugin_path}/"
          else
            echo "${bundle} not found"
            exit 1
          fi
          echo "plugin contents:"
          ls -la "${plugin_path}/${bundle}"
        done

        # start/restart plex
        if [[ "${{ inputs.use_docker }}" == "true" ]]; then
          echo "using docker, no need to restart"

        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          # restart plex
          # first stop "Plex Media Server.exe"
          taskkill //IM "Plex*" //F

          # wait 5 seconds
          sleep 5

          # then start it again, cygpath converts windows path to unix path
          plex_path=$(cygpath.exe -u "${PROGRAMFILES}/Plex/Plex Media Server/Plex Media Server.exe")
          if [[ -f "${plex_path}" ]]; then
            "${plex_path}" &
          else
            echo "${plex_path} not found"
            exit 1
          fi

        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          # start plex
          open "/Applications/Plex Media Server.app"

        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          # reload daemon
          sudo systemctl daemon-reload

          # start
          sudo systemctl start plexmediaserver
        fi

        # outputs
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          app_data_path=$(cygpath.exe -w "${app_data_path}")
          plugin_path=$(cygpath.exe -w "${plugin_path}")
          plugin_log_path=$(cygpath.exe -w "${plugin_log_path}")
        fi
        echo "app_data_path=${app_data_path}" >> $GITHUB_OUTPUT
        echo "plugin_path=${plugin_path}" >> $GITHUB_OUTPUT
        echo "plugin_log_path=${plugin_log_path}" >> $GITHUB_OUTPUT

        echo "::endgroup::"

    - name: Bootstrap Plex server
      env:
        PLEX_APP_DATA_PATH: ${{ steps.plex.outputs.app_data_path }}
        PLEX_PLUGIN_LOG_PATH: ${{ steps.plex.outputs.plugin_log_path }}
        PLEX_PLUGIN_PATH: ${{ steps.plex.outputs.plugin_path }}
        PLEXAPI_PLEXAPI_TIMEOUT: "60"
      id: bootstrap
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Bootstrap Plex server"

        # check inputs
        if [[ "${{ inputs.accept_eula }}" == "true" ]]; then
          accept_eula="--accept-eula"
        fi
        if [[ -n "${{ inputs.additional_server_queries_put }}" ]]; then
          echo "additional_server_queries_put: ${{ inputs.additional_server_queries_put }}"
          server_queries_put="--additional-server-queries-put ${{ inputs.additional_server_queries_put }}"
        fi
        if [[ "${{ inputs.use_docker }}" == "false" ]]; then
          use_docker="--no-docker"
        else
          if [[ -n "${{ inputs.docker_tag }}" ]]; then
            docker_tag="--docker-tag ${{ inputs.docker_tag }}"
          fi
        fi
        if [[ -n "${{ inputs.language }}" ]]; then
          language="--language ${{ inputs.language }}"
        fi
        if [[ -n "${{ inputs.timezone }}" ]]; then
          timezone="--timezone ${{ inputs.timezone }}"
        fi
        if [[ "${{ inputs.without_movies }}" == "true" ]]; then
          without_movies="--without-movies"
        fi
        if [[ "${{ inputs.without_movies_imdb }}" == "true" ]]; then
          without_movies_imdb="--without-movies-imdb"
        fi
        if [[ "${{ inputs.without_movies_tmdb }}" == "true" ]]; then
          without_movies_tmdb="--without-movies-tmdb"
        fi
        if [[ "${{ inputs.without_music }}" == "true" ]]; then
          without_music="--without-music"
        fi
        if [[ "${{ inputs.without_photos }}" == "true" ]]; then
          without_photos="--without-photos"
        fi
        if [[ "${{ inputs.without_shows }}" == "true" ]]; then
          without_shows="--without-shows"
        fi
        if [[ "${{ inputs.without_shows_tmdb }}" == "true" ]]; then
          without_shows_tmdb="--without-shows-tmdb"
        fi
        if [[ "${{ inputs.without_shows_tvdb }}" == "true" ]]; then
          without_shows_tvdb="--without-shows-tvdb"
        fi

        "${{ steps.venv.outputs.python-path }}" \
          -u scripts/plex_bootstraptest.py \
          --destination plex \
          --advertise-ip 127.0.0.1 \
          --bootstrap-timeout ${{ inputs.bootstrap_timeout }} \
          --server-name plex-test-${{ runner.os }}-${{ github.run_id }} \
          --show-token-plexhints \
          ${accept_eula} \
          ${server_queries_put} \
          ${docker_tag} \
          ${language} \
          ${timezone} \
          ${use_docker} \
          ${without_movies} \
          ${without_movies_imdb} \
          ${without_movies_tmdb} \
          ${without_music} \
          ${without_photos} \
          ${without_shows} \
          ${without_shows_tmdb} \
          ${without_shows_tvdb} \
          --unclaimed
        echo "::endgroup::"

    - name: Get token from file
      id: token
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::group::Get token from file"
        if [[ -f .plex_token ]]; then
          echo "plex_token=$(cat .plex_token)" >> $GITHUB_OUTPUT
        else
          echo ".plex_token not found"
          exit 1
        fi
        echo "::endgroup::"
